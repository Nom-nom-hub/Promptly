name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      generate_prompts:
        description: 'Generate new prompts'
        required: false
        default: 'false'
      prompt_count:
        description: 'Number of prompts to generate'
        required: false
        default: '10'

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  generate-prompts:
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.generate_prompts == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
      
      - name: Generate Prompts
        run: |
          echo "Generating ${PROMPT_COUNT} new prompts..."
          cat > generate-prompts.js << 'EOF'
          const fs = require('fs');
          
          // Read the existing prompts.js file
          const promptsFile = fs.readFileSync('js/prompts.js', 'utf8');
          
          // Function to generate a random prompt
          function generateRandomPrompt(id) {
            const categories = ['writing', 'coding', 'marketing', 'business', 'data', 'design'];
            const category = categories[Math.floor(Math.random() * categories.length)];
            
            const templates = {
              writing: [
                "Create a detailed [CONTENT_TYPE] about [TOPIC] that includes [STRUCTURE] and addresses [AUDIENCE].",
                "Develop a comprehensive [CONTENT_TYPE] on [TOPIC] with [STRUCTURE] tailored for [AUDIENCE].",
                "Summarize the key findings, methodology, and implications of research on [TOPIC] in a clear and concise manner."
              ],
              coding: [
                "Write a function in [LANGUAGE] that [FUNCTIONALITY] with optimal time and space complexity.",
                "Debug this [LANGUAGE] code that's supposed to [FUNCTIONALITY] but is producing [ERROR].",
                "Create a step-by-step tutorial on how to implement [FEATURE] in [FRAMEWORK]."
              ],
              marketing: [
                "Create a marketing campaign for [PRODUCT] targeting [AUDIENCE] with a focus on [BENEFIT].",
                "Write a compelling email sequence for [PRODUCT_LAUNCH] that addresses common objections and includes clear CTAs.",
                "Develop a content strategy for [BRAND] that will increase engagement on [PLATFORM]."
              ],
              business: [
                "Create a business plan for [BUSINESS_TYPE] that includes market analysis, financial projections, and growth strategy.",
                "Develop a pitch deck for [STARTUP_IDEA] that will appeal to [INVESTOR_TYPE].",
                "Write a detailed SWOT analysis for [COMPANY] in the [INDUSTRY] industry."
              ],
              data: [
                "Analyze this dataset about [TOPIC] and provide insights on [SPECIFIC_QUESTION].",
                "Create a data visualization strategy for [DATA_TYPE] that effectively communicates [KEY_INSIGHT].",
                "Design a dashboard that tracks [METRICS] for a [BUSINESS_TYPE]."
              ],
              design: [
                "Design a user interface for [APPLICATION] that emphasizes [DESIGN_PRINCIPLE] and improves [USER_EXPERIENCE].",
                "Create a brand style guide for [COMPANY] that includes color palette, typography, and usage guidelines.",
                "Develop a wireframe for [WEBSITE_TYPE] that optimizes for [CONVERSION_GOAL]."
              ]
            };
            
            // Select a random template for the category
            const template = templates[category][Math.floor(Math.random() * templates[category].length)];
            
            // Generate a title based on the template
            const words = template.split(' ').filter(word => word.length > 4 && !word.includes('['));
            const titleWords = [];
            for (let i = 0; i < 3 && words.length > 0; i++) {
              const index = Math.floor(Math.random() * words.length);
              titleWords.push(words.splice(index, 1)[0]);
            }
            
            const title = titleWords.join(' ');
            
            // AI model recommendation
            const aiModels = ['GPT-4', 'Claude', 'Gemini', 'Llama'];
            const aiModel = aiModels[Math.floor(Math.random() * aiModels.length)];
            
            return {
              id: id,
              title: title.charAt(0).toUpperCase() + title.slice(1),
              content: template,
              category: category,
              ai: aiModel
            };
          }
          
          // Get the highest existing ID
          const idRegex = /id:\s*(\d+)/g;
          let match;
          let highestId = 0;
          
          while ((match = idRegex.exec(promptsFile)) !== null) {
            const id = parseInt(match[1]);
            if (id > highestId) {
              highestId = id;
            }
          }
          
          // Generate new prompts
          const count = parseInt(process.env.PROMPT_COUNT) || 10;
          const newPrompts = [];
          
          for (let i = 0; i < count; i++) {
            newPrompts.push(generateRandomPrompt(highestId + i + 1));
          }
          
          // Format the new prompts as code
          let newPromptsCode = '\n// New prompts generated on ' + new Date().toISOString() + '\n';
          newPromptsCode += 'const newGeneratedPrompts = [\n';
          
          newPrompts.forEach((prompt, index) => {
            newPromptsCode += `    {\n`;
            newPromptsCode += `        id: ${prompt.id},\n`;
            newPromptsCode += `        title: "${prompt.title}",\n`;
            newPromptsCode += `        content: "${prompt.content}",\n`;
            newPromptsCode += `        category: "${prompt.category}"`;
            if (prompt.ai) {
              newPromptsCode += `,\n        ai: "${prompt.ai}"`;
            }
            newPromptsCode += `\n    }${index < newPrompts.length - 1 ? ',' : ''}\n`;
          });
          
          newPromptsCode += '];\n\n';
          newPromptsCode += '// Add these to defaultPromptsData\n';
          newPromptsCode += 'defaultPromptsData.push(...newGeneratedPrompts);\n';
          
          // Append to the prompts.js file
          fs.appendFileSync('js/prompts.js', newPromptsCode);
          
          console.log(`Added ${count} new prompts to js/prompts.js`);
          EOF
          
          node generate-prompts.js
        env:
          PROMPT_COUNT: ${{ github.event.inputs.prompt_count || '10' }}
      
      - name: Commit and push changes
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          git add js/prompts.js
          git commit -m "Add ${PROMPT_COUNT} new prompts via GitHub Actions"
          git push
        env:
          PROMPT_COUNT: ${{ github.event.inputs.prompt_count }}

  build:
    runs-on: ubuntu-latest
    needs: [generate-prompts]
    if: always() && (needs.generate-prompts.result == 'success' || needs.generate-prompts.result == 'skipped')
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: main
      - name: Setup Pages
        uses: actions/configure-pages@v4
      - name: Copy assets
        run: |
          mkdir -p _site/js
          cp -r js/* _site/js/
          cp manifest.json _site/
          # Ensure proper permissions and line endings
          find _site/js -type f -name "*.js" -exec chmod 644 {} \;
          find _site/js -type f -name "*.js" -exec dos2unix {} \;
      - name: Ensure latest prompts are included
        run: |
          echo "Ensuring the latest prompts are included in the build..."
          # Add a timestamp to prompts.js to force cache invalidation
          echo "// Last updated: $(date)" >> js/prompts.js
          # Add a version number to index.html
          sed -i "s/<\/title>/<\/title>\n    <meta name=\"build-version\" content=\"$(date +%s)\">/g" index.html
      - name: Build with Jekyll
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./
          destination: ./_site
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./_site

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
